if((lst[i] + lst[j]) == k){
ans = 'yes'
} else {
ans = 'no'
}
}
break
}
ans
lst = c(10,15,3,7)
ans = NULL
k = 25
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if((lst[i] + lst[j]) == k){
ans = 'yes'
} else {
ans = 'no'
}
}
break
}
ans
nrow(lst)
lst = c(10,15,3,7)
ans = NULL
k = 25
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k)
ans = 'yes'
}
}
ans
k = 17
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k)
ans = 'yes'
}
}
ans
k = 20
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k)
ans = 'yes'
}
}
ans
k = 40
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k)
ans = 'yes'
}
}
ans
ans = NULL
k = 100
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k)
ans = 'yes'
}
}
ans
l = c(1,2,3,5)
l == 3
any(l == 3)
lst = c(10,15,3,7)
ans = NULL
k = 100
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k){
ans = 'yes'
break
}
}
ans = 'no'
}
ans
lst = c(10,15,3,7)
ans = NULL
k = 17
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k){
ans = 'yes'
break
}
}
ans = 'no'
}
ans
ans = NULL
k = 17
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k){
ans = 'yes'
break
}
ans = 'no'
}
}
ans
ans = NULL
k = 17
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k){
ans = 'yes'
break
} else {
ans = 'no'
}
}
}
ans
ans = NULL
k = 17
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k){
ans = 'yes'
break
}
}
}
ans
ans = NULL
k = 100
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k){
ans = 'yes'
break
}
}
}
ans
k = 100
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k){
ans = 'yes'
break
}
}
}
ans
lst = c(10,15,3,7)
#ans = NULL
k = 17
for(i in 1:length(lst)){
for(j in 2:length(lst)){
if(lst[i] + lst[j] == k){
ans = 'yes'
break
}
}
}
ans
# main
if(outcome == 'heart attack'){
df = data[data[,7] == state & !is.na(data[,11]),]
srt = df[order(df[,11], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,11])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,11])]
}
}
# main
if(outcome == 'heart attack'){
df = data[data[,7] == state & !is.na(data[,11]),]
srt = df[order(df[,11], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,11])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,11])]
}
}
if(outcome == 'heart failure'){
df = data[data[,7] == state & !is.na(data[,17]),]
srt = df[order(df[,17], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,17])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,17])]
}
}
rankhospital <- function(state, outcome, num = 'best'){
# read data
data = read.csv("A:/R-programming(coursera)/outcome-of-care-measures.csv", na.strings = "Not Available",
stringsAsFactors = FALSE)
# error handling
if(! outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
if(! state %in% unique(data[,7])){
stop('invalid state')
}
# return
hospital = NULL
# main
if(outcome == 'heart attack'){
df = data[data[,7] == state & !is.na(data[,11]),]
srt = df[order(df[,11], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,11])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,11])]
}
}
if(outcome == 'heart failure'){
df = data[data[,7] == state & !is.na(data[,17]),]
srt = df[order(df[,17], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,17])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,17])]
}
}
if(outcome == 'pneumonia'){
df = data[data[,7] == state & !is.na(data[,23]),]
srt = df[order(df[,23], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,23])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,23])]
}
}
if(!num %in% 1:nrow(df) & !num %in% c("best","worst")){
hospital = NA
}
return(hospital)
}
rankhospital("TX", "heart failure",1)
rankhospital("TX", "heart failure",'best')
rankhospital <- function(state, outcome, num = 'best'){
# read data
data = read.csv("A:/R-program-coursera/outcome-of-care-measures.csv", na.strings = "Not Available",
stringsAsFactors = FALSE)
# error handling
if(! outcome %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
if(! state %in% unique(data[,7])){
stop('invalid state')
}
# return
hospital = NULL
# main
if(outcome == 'heart attack'){
df = data[data[,7] == state & !is.na(data[,11]),]
srt = df[order(df[,11], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,11])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,11])]
}
}
if(outcome == 'heart failure'){
df = data[data[,7] == state & !is.na(data[,17]),]
srt = df[order(df[,17], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,17])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,17])]
}
}
if(outcome == 'pneumonia'){
df = data[data[,7] == state & !is.na(data[,23]),]
srt = df[order(df[,23], df[,2]),]
if(num %in% 1:nrow(df)){
hospital = srt[,2][num]
} else if(num == 'best'){
hospital = srt[,2][which.min(srt[,23])]
} else if(num == 'worst'){
hospital = srt[,2][which.max(srt[,23])]
}
}
if(!num %in% 1:nrow(df) & !num %in% c("best","worst")){
hospital = NA
}
return(hospital)
}
rankhospital("TX", "heart failure",1)
rankhospital("TX", "heart failure",'best')
pollutantmean <- function(specdata, pollutant, id = 1:332){
files = list.files("A:/specdata", full.names = TRUE)
data = data.frame()
# return
#avg = 0
# loop:
for(i in id){
data = rbind(data,read.csv(files[i]))
}
# calculate mean of pollutant:
avg = mean(data[,pollutant], na.rm = TRUE)
return(avg)
}
#
pollutantmean('specadata','sulfate',1:10)
pollutantmean('specadata','nitrate',70:72)
pollutantmean("specdata", "nitrate", 23)
complete <- function(specdata, id = 1:332){
files = list.files("A:/specdata", full.names = TRUE)
#intialize values
monitor_id = NULL
comp_obs = NULL
# return
complete_df = data.frame()
# loop
for(i in id){
monitor_id = append(monitor_id,i)
comp_obs = append(comp_obs,sum(complete.cases(read.csv(files[i]))))
}
complete_df = data.frame(id = monitor_id, nobs = comp_obs)
return(complete_df)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
corr <- function(directory, threshold = 0){
files = list.files("A:/specdata", full.names = TRUE)
# return a numeric vector containing correlation value b/w pollutant
cor_value = NULL
# retrive complete cases dataframe
complete_df = complete('specdata')
# loop
for(i in seq_len(nrow(complete_df))){
if(complete_df[,'nobs'][i] > threshold){
data = read.csv(files[i])
data = data[complete.cases(data),]
cor_value = append(cor_value, cor(data[,'sulfate'], data[,'nitrate']))
}
}
return(cor_value)
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
options(digits = 4)
corr <- function(directory, threshold = 0) {
files <- list.files("A:/specdata", full.names = TRUE)
readings <- vector(mode = "numeric")
for(i in seq_along(files)) {
reading <- read.csv(files[i])
ok <- complete.cases(reading$sulfate, reading$nitrate)
reading <- reading[ok,]
if(sum(ok) > threshold) {
readings <- append(readings, cor(reading$sulfate, reading$nitrate))
}
}
as.vector(readings)
}
cr <- corr("specdata", 150)
head(cr)
other <- head(cr)
other
corr <- function(directory, threshold = 0){
files = list.files("A:/specdata", full.names = TRUE)
# return a numeric vector containing correlation value b/w pollutant
cor_value = NULL
# retrive complete cases dataframe
complete_df = complete('specdata')
# loop
for(i in seq_len(nrow(complete_df))){
if(complete_df[,'nobs'][i] > threshold){
data = read.csv(files[i])
data = data[complete.cases(data),]
cor_value = append(cor_value, cor(data[,'sulfate'], data[,'nitrate']))
}
}
return(cor_value)
}
cr <- corr("specdata", 150)
complete <- function(specdata, id = 1:332){
files = list.files("A:/specdata", full.names = TRUE)
#intialize values
monitor_id = NULL
comp_obs = NULL
# return
complete_df = data.frame()
# loop
for(i in id){
monitor_id = append(monitor_id,i)
comp_obs = append(comp_obs,sum(complete.cases(read.csv(files[i]))))
}
complete_df = data.frame(id = monitor_id, nobs = comp_obs)
return(complete_df)
}
cr <- corr("specdata", 150)
head(cr)
my = head(cr)
other
my
best <- function(state, outcome) {
# Read Outcome Data
outcomes <- read.csv("A:/R-programming(coursera)/outcome-of-care-measures.csv")
# Check the state and the outcome are valid
if (!state %in% outcomes$State) {
stop("invalid state")
} else {
state <- outcomes$State == state
}
if(outcome == "heart attack") {
outcome = 11
} else if(outcome == "heart failure") {
outcome = 17
} else if(outcome == "pneumonia") {
outcome = 23
} else {
stop("invalid outcome")
}
# Return the hospital name in the state with lowest 30-day death rate
statedata <- outcomes[state,]
mortrate <- as.numeric(as.vector(statedata[, outcome]))
minrate <- min(mortrate, na.rm = TRUE)
minhosp <- as.vector(statedata[mortrate == minrate, 2])
sort(minhosp)[1]
}
best('TX','heart attack')
best('TXv','heart attack')
best('TXv','heart attacklkh')
best <- function(state, outcome){
# read data
data = read.csv("A:/R-programming(coursera)/outcome-of-care-measures.csv", na.strings = "Not Available",
stringsAsFactors = FALSE)
# error handling
if(!state %in% unique(data[,7])){
stop('invalid state')
}
if(!outcome  %in% c('heart attack','heart failure','pneumonia')){
stop('invalid outcome')
}
# return
best_hospital = NULL
# subset data on state
df = data[data[,7] == state,]
# Return the hospital name in the state with lowest 30-day death rate
if(outcome == 'heart attack'){
sorted_df = df[order(df[,2]),]
best_hospital = sorted_df[,2][which.min(sorted_df[,11])]
} else if(outcome == 'heart failure'){
sorted_df = df[order(df[,2]),]
best_hospital = sorted_df[,2][which.min(sorted_df[,17])]
} else if(outcome == 'pneumonia'){
sorted_df = df[order(df[,2]),]
best_hospital = sorted_df[,2][which.min(sorted_df[,23])]
}
return(best_hospital)
}
best('TX','heart attack')
best('TX','heart attackkl')
best('Tjk','heart attack')
getwd()
setwd("A:/coursera-r-programming/Air-pollution")
dir()
pollutantmean <- function(directory, pollutant, id = 1:332){
# list all the files in a directory,prepend with path
files = list.files(path = directory, pattern = "*.csv", full.names = TRUE)
# initialize empty data frame
data = data.frame()
# loop over id's:
for(i in id){
data = rbind(data,read.csv(files[i]))
}
# calculate mean of pollutant:
avg = mean(data[,pollutant], na.rm = TRUE)
# return mean
return(avg)
}
pollutantmean('specdata','sulfate',1:10)
complete <- function(directory, id = 1:332){
# list all the files in a directory,prepend with path
files = list.files(path = directory, pattern = "*.csv", full.names = TRUE)
#intialize variables
monitor_id = NULL
comp_obs = NULL
# loop over monitor's
for(i in id){
monitor_id = append(monitor_id,i)
comp_obs = append(comp_obs,sum(complete.cases(read.csv(files[i]))))
}
# return data frame
complete_df = data.frame(id = monitor_id, nobs = comp_obs)
return(complete_df)
}
complete('specdata',17)
complete('specdata',c(1,17))
